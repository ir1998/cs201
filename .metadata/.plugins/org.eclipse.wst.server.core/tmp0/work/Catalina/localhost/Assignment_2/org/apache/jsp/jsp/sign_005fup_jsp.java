/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.0.M15
 * Generated at: 2017-05-06 17:06:55 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import data.StringConstants;

public final class sign_005fup_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("data.StringConstants");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<title>Sign Up</title>\n");
      out.write("<link rel=\"stylesheet\" href=\"../css/main.css\">\n");
      out.write("<link rel=\"stylesheet\" href=\"../css/pre-login.css\">\n");
      out.write("<link rel=\"stylesheet\" href=\"../css/sign_up.css\">\n");
      out.write("<link href=\"https://fonts.googleapis.com/css?family=Lato:700i\"\n");
      out.write("\trel=\"stylesheet\">\n");
      out.write("<script src=\"../js/main.js\" type=\"text/javascript\"></script>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\n");
      out.write("\t<div id=\"title_container\">Cinemate</div>\n");
      out.write("\n");
      out.write("\t<div id=\"welcome_text\">Enter your information.</div>\n");
      out.write("\n");
      out.write("\t<div id=\"outer_container\">\n");
      out.write("\t\t<div id=\"inner_container\">\n");
      out.write("\t\t\t<div id=\"login_container\">\n");
      out.write("\t\t\t\t<input type=\"text\" name=\"");
      out.print(StringConstants.FULL_NAME);
      out.write("\"\n");
      out.write("\t\t\t\t\tid=\"");
      out.print(StringConstants.FULL_NAME);
      out.write("\" placeholder=\"Full Name\">\n");
      out.write("\t\t\t\t<br> <input type=\"text\" name=\"");
      out.print(StringConstants.USERNAME);
      out.write("\"\n");
      out.write("\t\t\t\t\tid=\"");
      out.print(StringConstants.USERNAME);
      out.write("\" placeholder=\"Username\">\n");
      out.write("\t\t\t\t<br> <input type=\"text\" name=\"");
      out.print(StringConstants.PASSWORD);
      out.write("\"\n");
      out.write("\t\t\t\t\tid=\"");
      out.print(StringConstants.PASSWORD);
      out.write("\" placeholder=\"Password\">\n");
      out.write("\t\t\t\t<br> <input type=\"text\" name=\"");
      out.print(StringConstants.IMAGE_URL);
      out.write("\"\n");
      out.write("\t\t\t\t\tid=\"");
      out.print(StringConstants.IMAGE_URL);
      out.write("\" placeholder=\"Image URL\">\n");
      out.write("\t\t\t\t<br> <br>\n");
      out.write("\t\t\t\t<div class=\"submit_button\">\n");
      out.write("\t\t\t\t\t<!-- call the javascript function which makes an ajax call to the servlet\n");
      out.write("\t\t\t\t\twe pass in the servlet name, the jsp page name of where we will navigate if there is no error,\n");
      out.write("\t\t\t\t\tan array of id strings of all the parameters needed in the ajax call\n");
      out.write("\t\t\t\t\tthe number of parameters in the array, and finally, the id string of the error div -->\n");
      out.write("\t\t\t\t\t<input type=\"submit\"\n");
      out.write("\t\t\t\t\t\tonclick=\"return errorCheck('");
      out.print(StringConstants.SIGN_UP_SERVLET);
      out.write("', '");
      out.print(StringConstants.BIG_FEED_JSP);
      out.write("', ['");
      out.print(StringConstants.FULL_NAME);
      out.write("', '");
      out.print(StringConstants.USERNAME);
      out.write("', '");
      out.print(StringConstants.PASSWORD);
      out.write("', '");
      out.print(StringConstants.IMAGE_URL);
      out.write("'], 4, 'errorDiv')\"\n");
      out.write("\t\t\t\t\t\tvalue=\"Sign Up\">\n");
      out.write("\t\t\t\t</div>\n");
      out.write("\t\t\t\t<div id=\"errorDiv\" class=error_message></div>\n");
      out.write("\t\t\t</div>\n");
      out.write("\t\t</div>\n");
      out.write("\t</div>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
