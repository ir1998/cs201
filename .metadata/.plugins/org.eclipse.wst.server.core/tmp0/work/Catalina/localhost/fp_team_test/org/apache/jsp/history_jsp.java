/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.0.M15
 * Generated at: 2017-04-19 14:48:57 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import data.Client;
import data.User;
import data.Stock;
import data.Transaction;
import java.util.List;

public final class history_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("data.Transaction");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("data.User");
    _jspx_imports_classes.add("data.Client");
    _jspx_imports_classes.add("data.Stock");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE html>\n");
      out.write("<html lang=\"en\" >\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<head>\n");
      out.write("\t<meta charset=\"UTF-8\">\n");
      out.write("\t<title>fortune - gamify investing</title>\n");
      out.write("\t<link rel=\"stylesheet\" href=\"http://ajax.googleapis.com/ajax/libs/angular_material/1.1.0/angular-material.min.css\">\n");
      out.write("\t<link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\">\n");
      out.write("\t<link rel=\"stylesheet\" type=\"text/css\" href=\"mdstyle.css\">\n");
      out.write("\n");
      out.write("</head>\n");
      out.write("<script>\n");
      out.write("function loadHistory(){\n");
      out.write("\tvar xhttp = new XMLHttpRequest();\n");
      out.write("\txhttp.open(\"GET\",\n");
      out.write("\t\t\t\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/TransactionHistoryServlet?\",\n");
      out.write("\t\t\tfalse);\n");
      out.write("\txhttp.send();\n");
      out.write("\tvar transactionData = JSON.parse(xhttp.responseText);\n");
      out.write("\tvar table = document.getElementById(\"stocksOwned\");\n");
      out.write("\tfor (var i=0; i<transactionData.length; i++)\n");
      out.write("\t{\n");
      out.write("\t  var transaction = JSON.parse(transactionData[i]);\n");
      out.write("\t  var row = document.createElement(\"TR\");\n");
      out.write("\t  var tU= document.createElement(\"TD\");\n");
      out.write("\t  var tT= document.createElement(\"TD\");\n");
      out.write("\t  var tA= document.createElement(\"TD\");\n");
      out.write("\t  var tP= document.createElement(\"TD\");\n");
      out.write("\t  var tTi= document.createElement(\"TD\");\n");
      out.write("\t  tU.appendChild(document.createTextNode(transaction.username));\n");
      out.write("\t  tT.appendChild(document.createTextNode(transaction.ticker));\n");
      out.write("\t  tA.appendChild(document.createTextNode(transaction.amount));\n");
      out.write("\t  tP.appendChild(document.createTextNode(transaction.price));\n");
      out.write("\t  tTi.appendChild(document.createTextNode(transaction.time));\n");
      out.write("\t  row.appendChild(tU);\n");
      out.write("\t  row.appendChild(tT);\n");
      out.write("\t  row.appendChild(tA);\n");
      out.write("\t  row.appendChild(tP);\n");
      out.write("\t  row.appendChild(tTi);\n");
      out.write("\t  table.appendChild(row);\n");
      out.write("\t}\n");
      out.write("/* \n");
      out.write("\tfor (var i=0; i<transactionData.length; i++)\n");
      out.write("\t{\n");
      out.write("\t  var transaction = JSON.parse(transactionData[i]);\n");
      out.write("\t  console.log(transaction);\n");
      out.write("\t  var text = document.createElement(\"span\");\n");
      out.write("\t  var textNode1 = document.createTextNode(transaction.username+\"    \");\n");
      out.write("\t  var textNode2 = document.createTextNode(transaction.ticker+\"    \");\n");
      out.write("\t  var textNode3 = document.createTextNode(transaction.amount+\"    \");\n");
      out.write("\t  var textNode4 = document.createTextNode(transaction.price+\"    \");\n");
      out.write("\t  var textNode5 = document.createTextNode(transaction.time+\"    \");\n");
      out.write("\t  text.appendChild(textNode1);\n");
      out.write("\t  text.appendChild(textNode2);\n");
      out.write("\t  text.appendChild(textNode3);\n");
      out.write("\t  text.appendChild(textNode4);\n");
      out.write("\t  text.appendChild(textNode5);\n");
      out.write("\n");
      out.write("\t  var element = document.getElementById(\"transactionsContainer\");\n");
      out.write("\t  element.appendChild(text);\n");
      out.write("\t  \n");
      out.write("\t  \n");
      out.write("\t  /* document.getElementById(\"transactionUsername\"+transaction.time).innerHTML = transaction.username;\n");
      out.write("\t  document.getElementById(\"transactionTicker\"+transaction.time).innerHTML = transaction.ticker;\n");
      out.write("\t  document.getElementById(\"transactionAmount\"+transaction.time).innerHTML = transaction.amount;\n");
      out.write("\t  document.getElementById(\"transactionPrice\"+transaction.time).innerHTML = transaction.price;\n");
      out.write("\t  document.getElementById(\"transactionTime\"+transaction.time).innerHTML = transaction.time; */\n");
      out.write("\treturn true;\n");
      out.write("\t\n");
      out.write("\t\n");
      out.write("};\n");
      out.write("\n");
      out.write("setInterval(function loadHistory(){\n");
      out.write("\tvar xhttp = new XMLHttpRequest();\n");
      out.write("\txhttp.open(\"GET\",\n");
      out.write("\t\t\t\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/TransactionHistoryServlet?\",\n");
      out.write("\t\t\tfalse);\n");
      out.write("\txhttp.send();\n");
      out.write("\tvar transactionData = JSON.parse(xhttp.responseText);\n");
      out.write("\tvar table = document.getElementById(\"stocksOwned\");\n");
      out.write("\tfor (var i=0; i<transactionData.length; i++)\n");
      out.write("\t{\n");
      out.write("\t  var transaction = JSON.parse(transactionData[i]);\n");
      out.write("\t  var row = document.createElement(\"TR\");\n");
      out.write("\t  var tU= document.createElement(\"TD\");\n");
      out.write("\t  var tT= document.createElement(\"TD\");\n");
      out.write("\t  var tA= document.createElement(\"TD\");\n");
      out.write("\t  var tP= document.createElement(\"TD\");\n");
      out.write("\t  var tTi= document.createElement(\"TD\");\n");
      out.write("\t  tU.appendChild(document.createTextNode(transaction.username));\n");
      out.write("\t  tT.appendChild(document.createTextNode(transaction.ticker));\n");
      out.write("\t  tA.appendChild(document.createTextNode(transaction.amount));\n");
      out.write("\t  tP.appendChild(document.createTextNode(transaction.price));\n");
      out.write("\t  tTi.appendChild(document.createTextNode(transaction.time));\n");
      out.write("\t  row.appendChild(tU);\n");
      out.write("\t  row.appendChild(tT);\n");
      out.write("\t  row.appendChild(tA);\n");
      out.write("\t  row.appendChild(tP);\n");
      out.write("\t  row.appendChild(tTi);\n");
      out.write("\t  table.appendChild(row);\n");
      out.write("\t}\n");
      out.write("\treturn true;\n");
      out.write("\t\n");
      out.write("\t\n");
      out.write("}, 60000);\n");
      out.write("</script>\n");
      out.write("<body onload=\"loadHistory()\" ng-app=\"InvestCS\" ng-cloak class=\"grad\">\n");
      out.write("\t<div layout=\"column\" ng-controller=\"mainPageController\" class=\"grad\">\n");
      out.write("\t\t<md-sidenav md-component-id=\"left\" class=\"md-sidenav-left\">\n");
      out.write("\t\t\t<md-list>\n");
      out.write("\t\t\t\t<md-list-item>\n");
      out.write("\t\t\t\t\t<md-button class=\"nav-item\" href=\"mainPage.jsp\">\n");
      out.write("\t\t\t\t\t\t<h3>Main Page</h3>\n");
      out.write("\t\t\t\t\t</md-button>\n");
      out.write("\t\t\t\t</md-list-item>\n");
      out.write("\t\t\t\t<md-list-item>\n");
      out.write("\t\t\t\t\t<md-button class=\"nav-item\" href=\"history.jsp\">\n");
      out.write("\t\t\t\t\t\t<h3>History</h3>\n");
      out.write("\t\t\t\t\t</md-button>\n");
      out.write("\t\t\t\t</md-list-item>\n");
      out.write("\t\t\t\t<md-list-item>\n");
      out.write("\t\t\t\t\t<md-button class=\"nav-item\" href=\"profile.jsp\">\n");
      out.write("\t\t\t\t\t\t<h3>Profile</h3>\n");
      out.write("\t\t\t\t\t</md-button>\n");
      out.write("\t\t\t\t</md-list-item>\n");
      out.write("\t\t\t</md-list>\n");
      out.write("\t\t</md-sidenav>\n");
      out.write("\t\t<md-toolbar class=\"siteToolbar\">\n");
      out.write("\t\t\t<div class=\"md-toolbar-tools\">\n");
      out.write("\t\t\t\t<md-button class=\"siteButton\" ng-click=\"openLeftMenu()\">\n");
      out.write("\t\t\t\t\t<md-icon ng-bind=\"'menu'\"></md-icon>\n");
      out.write("\t\t\t\t</md-button>\n");
      out.write("\t\t\t\t<h2 align=\"center\" flex md-truncate>fortune - Past Activity and Transaction History</h2>\n");
      out.write("\t\t\t\t<md-button class=\"siteButton\" href=\"profile.jsp\">\n");
      out.write("\t\t\t\t\t<md-icon ng-bind=\"'person'\"></md-icon>\n");
      out.write("\t\t\t\t\tProfile\n");
      out.write("\t\t\t\t</md-button>\n");
      out.write("\t\t\t\t<md-button class=\"siteButton\" href=\"login.jsp\">\n");
      out.write("\t\t\t\t\t<md-icon ng-bind=\"'exit_to_app'\"></md-icon>\n");
      out.write("\t\t\t\t\tLogout\n");
      out.write("\t\t\t\t</md-button>\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t</div>\n");
      out.write("\t\t</md-toolbar>\n");
      out.write("\t\t<md-content class=\"grad\">\n");
      out.write("\t\t\t<div class=\"historyContent\" layout=\"column\">\n");
      out.write("\t\t\t\t<div layout=\"column\">\n");
      out.write("\t\t\t\t\t<h1 class=\"historyTitle\">Recent Stock Activity</h1>\n");
      out.write("\t\t\t\t\t<md-card id=\"transactionsContainer\">\n");
      out.write("\t\t\t\t\t\t<table class=\"stocksOwned\" id = \"stocksOwned\">\n");
      out.write("\t\t\t\t\t\t\t<tr>\n");
      out.write("\t\t\t\t\t\t\t\t<td class=\"dataField\">User</td>\n");
      out.write("\t\t\t\t\t\t\t\t<td class=\"dataField\">Stock Name</td>\n");
      out.write("\t\t\t\t\t\t\t\t<td class=\"dataField\">Stock Amount</td>\n");
      out.write("\t\t\t\t\t\t\t\t<td class=\"dataField\">Stock Price</td>\n");
      out.write("\t\t\t\t\t\t\t\t<td class=\"dataField\">Time</td>\n");
      out.write("\t\t\t\t\t\t\t</tr>\n");
      out.write("\t\t\t\t\t\t\t");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t<!-- <tr> -->\n");
      out.write("\t\t\t\t\t\t\t");
      out.write("\n");
      out.write("\t\t\t\t\t\t</table>\n");
      out.write("\t\t\t\t\t</md-card>\n");
      out.write("\t\t\t\t\t\n");
      out.write("\t\t\t\t</md-button>\n");
      out.write("\t\t\t\t</div>\n");
      out.write("\t\t\t</div>\n");
      out.write("\t\t</md-content>\n");
      out.write("\t</div>\t\n");
      out.write("\t<!-- Angular Material requires Angular.js Libraries -->\n");
      out.write("\t<script src=\"http://ajax.googleapis.com/ajax/libs/angularjs/1.5.5/angular.min.js\"></script>\n");
      out.write("\t<script src=\"http://ajax.googleapis.com/ajax/libs/angularjs/1.5.5/angular-animate.min.js\"></script>\n");
      out.write("\t<script src=\"http://ajax.googleapis.com/ajax/libs/angularjs/1.5.5/angular-aria.min.js\"></script>\n");
      out.write("\t<script src=\"http://ajax.googleapis.com/ajax/libs/angularjs/1.5.5/angular-messages.min.js\"></script>\n");
      out.write("\n");
      out.write("\t<!-- Angular Material Library -->\n");
      out.write("\t<script src=\"http://ajax.googleapis.com/ajax/libs/angular_material/1.1.0/angular-material.min.js\"></script>\n");
      out.write("\n");
      out.write("\t<!-- Your application bootstrap  -->\n");
      out.write("\t<script type=\"text/javascript\" src=\"app.js\"></script>\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
