package server;

import java.awt.Toolkit;

import javax.swing.*;

public class WebServerGUI extends JFrame {

	private static final long serialVersionUID = 1L;
	
	// Variables declaration - do not modify//GEN-BEGIN:variables
	private JButton jButtDocRoot;
	private JLabel jLabel2;
	private JLabel jLabel3;
	private JLabel jLabel4;
	private JMenu jMenu1;
	private JMenuBar jMenuBar1;
	private JMenuItem jMenuExit;
	private JMenuItem jMenuServerStart;
	private JMenuItem jMenuServerStop;
	private JScrollPane jScrollPane1;
	private JTextArea jTextArea1;
	private JTextField jTextCurrStatus;
	private JTextField jTextDocRoot;
	private JTextField jTextPortNumber;
	private JTextArea jTextStatusMessage;
	// End of variables declaration//GEN-END:variables

	boolean serverUp;
	WebServer myHttpServer;
	Thread myThread;
	int portnumber;
	boolean firstStart;

	public WebServerGUI() {
		initComponents();
		// create the server for this GUI
		myHttpServer = new WebServer();
		myThread = new Thread(myHttpServer);
		myThread.start();
		String docroot = System.getProperty("user.dir") + "/webroot";
		this.jTextDocRoot.setText(docroot);
		// set Default Portnumber
		portnumber = 8080;
		this.jTextPortNumber.setText(Integer.toString(portnumber));
		System.out.println("Web Server up and running!");
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
	private void initComponents() {
		jLabel2 = new JLabel();
		jLabel3 = new JLabel();
		jLabel4 = new JLabel();
		jTextPortNumber = new JTextField();
		jTextCurrStatus = new JTextField();
		jTextDocRoot = new JTextField();
		jButtDocRoot = new JButton();
		jTextArea1 = new JTextArea();
		jScrollPane1 = new JScrollPane();
		jTextStatusMessage = new JTextArea();
		jMenuBar1 = new JMenuBar();
		jMenu1 = new JMenu();
		jMenuServerStart = new JMenuItem();
		jMenuServerStop = new JMenuItem();
		jMenuExit = new JMenuItem();

		getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

		setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
		setTitle("Simple Web Server");
		jLabel2.setText("Status Messages");
		getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, -1, -1));

		jLabel3.setText("Port Number");
		getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 10, -1, -1));

		jLabel4.setText("Current Status");
		getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 40, -1, -1));

		jTextPortNumber.setText("8080");
		jTextPortNumber.setToolTipText("Use this field to set the port number that the server will listen on");
		jTextPortNumber.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusGained(java.awt.event.FocusEvent evt) {
				jTextPortNumberFocusGained(evt);
			}

			public void focusLost(java.awt.event.FocusEvent evt) {
				jTextPortNumberFocusLost(evt);
			}
		});

		getContentPane().add(jTextPortNumber, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 10, 70, -1));

		jTextCurrStatus.setText("Stopped");
		jTextCurrStatus.setEnabled(false);
		getContentPane().add(jTextCurrStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 40, 70, -1));

		jTextDocRoot.setText("webroot/");
		jTextDocRoot.setEnabled(false);
		getContentPane().add(jTextDocRoot, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 80, 270, -1));

		jButtDocRoot.setText("Document Root");
		jButtDocRoot.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtDocRootActionPerformed(evt);
			}
		});

		getContentPane().add(jButtDocRoot, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, -1, -1));

		getContentPane().add(jTextArea1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 210, -1, -1));

		jTextStatusMessage.setColumns(40);
		jTextStatusMessage.setEditable(false);
		jTextStatusMessage.setFont(new java.awt.Font("Dialog", 0, 10));
		jTextStatusMessage.setLineWrap(true);
		jTextStatusMessage.setRows(5);
		jScrollPane1.setViewportView(jTextStatusMessage);

		getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, 420, 190));

		jMenu1.setText("Server");
		jMenuServerStart.setText("Start Server");
		jMenuServerStart.setToolTipText("Click to start server");
		jMenuServerStart.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jMenuServerStartActionPerformed(evt);
			}
		});

		jMenu1.add(jMenuServerStart);

		jMenuServerStop.setText("Stop Server");
		jMenuServerStop.setToolTipText("Click to stop server");
		jMenuServerStop.setEnabled(false);
		jMenuServerStop.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jMenuServerStopActionPerformed(evt);
			}
		});

		jMenu1.add(jMenuServerStop);

		jMenuExit.setText("Exit");
		jMenuExit.setToolTipText("Exit Server");
		jMenuExit.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jMenuExitActionPerformed(evt);
			}
		});

		jMenu1.add(jMenuExit);

		jMenuBar1.add(jMenu1);

		setJMenuBar(jMenuBar1);

		pack();
	}
	// </editor-fold>//GEN-END:initComponents

	private void jTextPortNumberFocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_jTextPortNumberFocusLost
	{//GEN-HEADEREND:event_jTextPortNumberFocusLost
			// User has left the port number box so check the value they have entered
		// Don/t let them leave unless a valid port number has been entered
		String newportval = this.jTextPortNumber.getText();
		try {
			// If parse fails then exception message will be printed out
			int portnum = Integer.parseInt(newportval);
			// if checkport returns false then an invalid port number has been selected
			if (checkPort(portnum) == false) {
				// an error with the port number entered so retain focus
				this.jTextPortNumber.requestFocus();
				this.jMenuServerStart.setEnabled(false);
			} else {
				// Port number OK, set the value that can be passed to server on startup
				portnumber = portnum;
				if (serverUp == false) {
					this.jMenuServerStart.setEnabled(true);
				}
			}
		} catch (NumberFormatException ex) {
			Toolkit.getDefaultToolkit().beep();
			this.setStatusMessage("Error port number must an integer value between 1024 and 65536\n");
			this.jMenuServerStart.setEnabled(false);
		}
	}//GEN-LAST:event_jTextPortNumberFocusLost

	private boolean checkPort(int portnum) {
		if (portnum < 1024 || portnum > 65535) {
			if (portnum < 1024) {
				Toolkit.getDefaultToolkit().beep();
				setStatusMessage("Error, port number must be less than 1024\n");
			} else {
				Toolkit.getDefaultToolkit().beep();
				setStatusMessage("Error, port number must be less than 65535\n");
			}
			return false;
		} else {
			return true;
		}
	}

	private void jTextPortNumberFocusGained(java.awt.event.FocusEvent evt)//GEN-FIRST:event_jTextPortNumberFocusGained
	{//GEN-HEADEREND:event_jTextPortNumberFocusGained

	}//GEN-LAST:event_jTextPortNumberFocusGained

	private void jButtDocRootActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtDocRootActionPerformed
	{//GEN-HEADEREND:event_jButtDocRootActionPerformed
			// this button allows the user to change the directory out of which the server
		// serve doucment requests.  Changes can be made by selecting a directory using
		// the default file dialogues.
		JFileChooser myFileChooser = new JFileChooser();
		myFileChooser.setApproveButtonText("Select Folder");
		myFileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
		if (myFileChooser.showDialog(this, null) == myFileChooser.APPROVE_OPTION) {
			this.jTextDocRoot.setText(myFileChooser.getSelectedFile().getAbsolutePath());
		}
	}//GEN-LAST:event_jButtDocRootActionPerformed

	private void jMenuExitActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuExitActionPerformed
	{//GEN-HEADEREND:event_jMenuExitActionPerformed
			// TODO add your handling code here:
		System.exit(0);
	}//GEN-LAST:event_jMenuExitActionPerformed

	/**
	 * This private function simply disables the appropriate controls when the server is started or enables them when it is stopped.
	 *
	 * @param newstatus
	 *            true means start the server, false means stop
	 * @return this method does not return anything
	 */
	private void toggleControls(boolean newstatus) {
		if (newstatus == true) {
			// Need to disable the PortNumber text box, the server Exit menu item and the server start menu item
			// Need to enable the Server Stop Button
			this.jTextPortNumber.setEnabled(false);
			this.jMenuServerStart.setEnabled(false);
			this.jMenuExit.setEnabled(false);
			this.jButtDocRoot.setEnabled(false);
			this.jMenuServerStop.setEnabled(true);
		} else {
			// Need to enable the PortNumber text box, the server Exit menu item and the server start menu item
			// Need to disable the Server Stop Button
			this.jTextPortNumber.setEnabled(true);
			this.jMenuServerStart.setEnabled(true);
			this.jMenuExit.setEnabled(true);
			this.jButtDocRoot.setEnabled(true);
			this.jMenuServerStop.setEnabled(false);
			this.jTextStatusMessage.append("Bringing Server down....");
		}
	}

	private void jMenuServerStopActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuServerStopActionPerformed
	{//GEN-HEADEREND:event_jMenuServerStopActionPerformed
			//code to stop server in here
		myHttpServer.stopServer();
		if (myHttpServer.getStatus() == false) {
			toggleControls(false);
			//if successful then output final part of status message.
			this.jTextStatusMessage.append("OK, server stopped.\n");
			serverUp = false;
		} else {
			this.jTextStatusMessage.append(this.jTextStatusMessage.getText() + "error, server still running!\n");
		}
	}//GEN-LAST:event_jMenuServerStopActionPerformed

	private void jMenuServerStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuServerStartActionPerformed
		//code to start server in here
		String docroot;
		// Get the document root for the server
		docroot = this.jTextDocRoot.getText();
		System.out.println(docroot);
		// Quick check in here to make sure document root exists
		// the only way this could be false is if the user selects an existing folder
		// and then deletes this folder before starting the server!
		boolean exists = (new java.io.File(docroot)).exists();
		if (exists) {
			// Docroot directory exists so server can start
			myHttpServer.startServer(this, portnumber, docroot);
			if (myHttpServer.getStatus() == true) {
				toggleControls(true);
				this.jTextStatusMessage.append("OK, server started.\n");
				serverUp = true;
			} else {
				toggleControls(false);
				this.jTextStatusMessage
						.append(this.jTextStatusMessage.getText() + "error, server cannot start, is the chosen Port already in use?\n");
			}
		} else {
			// For some reason the document rot directory does not now exist, output error
			this.setStatusMessage(
					"Document Root folder no longer exists, please choose a new one or re-create the folder specified as Document root\n");
		}
	}//GEN-LAST:event_jMenuServerStartActionPerformed

	/**
	 * Command line method to invoke the GUI interface
	 * 
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new WebServerGUI().setVisible(true);
			}
		});
	}

	public void setStatusMessage(String message) {
		this.jTextStatusMessage.append(message);
	}

}
